<print,4,1>
<token_string,This is the Floyd Warsall algorithm,4,7>
<dim,8,1>
<id,n,8,5>
<token_coma,8,6>
<id,m,8,8>
<as,8,10>
<integer,8,13>
<input,9,1>
<token_string,Enter the number of nodes of your graph ,9,7>
<token_coma,9,49>
<id,n,9,51>
<input,10,1>
<token_string,Enter the number of edges of your graph ,10,7>
<token_coma,10,49>
<id,m,10,51>
<dim,12,1>
<shared,12,5>
<id,g,12,12>
<token_par_izq,12,13>
<id,n,12,14>
<token_coma,12,15>
<id,n,12,17>
<token_par_der,12,18>
<as,12,20>
<long,12,23>
<const,13,1>
<id,infinity,13,7>
<token_ampersand,13,15>
<token_igual,13,17>
<token_long,1000000000,13,19>
<id,initialize,14,1>
<id,n,14,12>
<print,16,1>
<token_string,Now, enter,16,7>
<token_pyc,16,19>
<id,m,16,21>
<token_pyc,16,22>
<token_string,edges with 3 three numbers in each line,16,24>
<print,17,1>
<token_string,1 <= u, v <= n and w <= 1000000,17,7>
<print,18,1>
<token_string,Indicating there is an edge between u and v and its weight is w,18,7>
<for,20,1>
<id,i,20,5>
<token_igual,20,7>
<token_integer,1,20,9>
<to,20,11>
<id,m,20,14>
<input,21,5>
<id,u,21,11>
<token_porcentaje,21,12>
<token_coma,21,13>
<id,v,21,15>
<token_porcentaje,21,16>
<token_coma,21,17>
<id,w,21,19>
<token_ampersand,21,20>
<id,g,22,5>
<token_par_izq,22,6>
<id,u,22,7>
<token_porcentaje,22,8>
<token_coma,22,9>
<id,v,22,11>
<token_porcentaje,22,12>
<token_par_der,22,13>
<token_igual,22,15>
<id,w,22,17>
<token_ampersand,22,18>
<next,23,1>
<id,floyd_warsall,25,1>
<token_par_izq,25,15>
<id,n,25,16>
<token_par_der,25,17>
<print,26,1>
<token_string,Floyd Warsall in your graph of,26,7>
<token_pyc,26,39>
<id,n,26,41>
<token_pyc,26,42>
<token_string,nodes has been executed,26,44>
<print,27,1>
<token_string,The matrix of distances is,27,7>
<id,show_distances,28,1>
<id,n,28,16>
<sub,34,1>
<id,initialize,34,5>
<token_par_izq,34,16>
<id,n,34,17>
<token_par_der,34,18>
<for,35,1>
<id,i,35,5>
<token_igual,35,7>
<token_integer,1,35,9>
<to,35,11>
<id,n,35,14>
<for,36,5>
<id,j,36,9>
<token_igual,36,11>
<token_integer,1,36,13>
<to,36,15>
<id,n,36,18>
<if,37,9>
<id,i,37,12>
<token_dif,37,14>
<id,j,37,17>
<then,37,19>
<id,g,38,13>
<token_par_izq,38,14>
<id,i,38,15>
<token_coma,38,16>
<id,j,38,18>
<token_par_der,38,19>
<token_igual,38,21>
<id,infinity,38,23>
<else,39,9>
<id,g,40,13>
<token_par_izq,40,14>
<id,i,40,15>
<token_coma,40,16>
<id,j,40,18>
<token_par_der,40,19>
<token_igual,40,21>
<token_integer,0,40,23>
<end,41,9>
<if,41,13>
<next,42,5>
<id,j,42,10>
<next,43,1>
<end,44,1>
<sub,44,5>
<sub,47,1>
<id,floyd_warsall,47,5>
<token_par_izq,47,19>
<id,n,47,20>
<token_porcentaje,47,21>
<token_par_der,47,22>
<for,48,1>
<id,k,48,5>
<token_igual,48,7>
<token_integer,1,48,9>
<to,48,11>
<id,n,48,14>
<token_porcentaje,48,15>
<for,49,5>
<id,i,49,9>
<token_igual,49,11>
<token_integer,1,49,13>
<to,49,15>
<id,n,49,18>
<token_porcentaje,49,19>
<for,50,9>
<id,j,50,13>
<token_igual,50,15>
<token_integer,1,50,17>
<to,50,19>
<id,n,50,22>
<token_porcentaje,50,23>
<id,g,51,13>
<token_par_izq,51,14>
<id,i,51,15>
<token_coma,51,16>
<id,j,51,18>
<token_par_der,51,19>
<token_igual,51,21>
<id,min,51,23>
<token_par_izq,51,26>
<id,g,51,27>
<token_par_izq,51,28>
<id,i,51,29>
<token_coma,51,30>
<id,j,51,32>
<token_par_der,51,33>
<token_coma,51,34>
<id,g,51,36>
<token_par_izq,51,37>
<id,i,51,38>
<token_coma,51,39>
<id,k,51,41>
<token_par_der,51,42>
<token_mas,51,44>
<id,g,51,46>
<token_par_izq,51,47>
<id,k,51,48>
<token_coma,51,49>
<id,j,51,51>
<token_par_der,51,52>
<token_par_der,51,53>
<next,52,9>
<next,53,5>
<next,54,1>
<id,n,58,1>
<token_porcentaje,58,2>
<token_igual,58,4>
<token_menos,58,6>
<token_integer,50,58,7>
<end,59,1>
<sub,59,5>
<function,62,1>
<id,min,62,10>
<token_ampersand,62,13>
<token_par_izq,62,15>
<id,a,62,16>
<token_ampersand,62,17>
<token_coma,62,18>
<id,b,62,20>
<token_ampersand,62,21>
<token_par_der,62,22>
<if,63,1>
<id,a,63,4>
<token_ampersand,63,5>
<token_menor,63,7>
<id,b,63,9>
<token_ampersand,63,10>
<then,63,12>
<id,min,64,5>
<token_igual,64,9>
<id,a,64,11>
<token_ampersand,64,12>
<else,65,1>
<id,min,66,5>
<token_igual,66,9>
<id,b,66,11>
<token_ampersand,66,12>
<end,67,1>
<if,67,5>
<end,68,1>
<function,68,5>
<sub,70,1>
<id,show_distances,70,5>
<token_par_izq,70,20>
<id,n,70,21>
<token_par_der,70,22>
<for,71,1>
<id,i,71,5>
<token_igual,71,7>
<token_integer,1,71,9>
<to,71,11>
<id,n,71,14>
<for,72,5>
<id,j,72,9>
<token_igual,72,11>
<token_integer,1,72,13>
<to,72,15>
<id,n,72,18>
<if,73,9>
<id,g,73,12>
<token_par_izq,73,13>
<id,i,73,14>
<token_coma,73,15>
<id,j,73,17>
<token_par_der,73,18>
<token_igual,73,20>
<id,infinity,73,22>
<then,73,31>
<print,74,13>
<token_string, - ,74,19>
<token_pyc,74,24>
<else,75,9>
<print,76,13>
<id,g,76,19>
<token_par_izq,76,20>
<id,i,76,21>
<token_coma,76,22>
<id,j,76,24>
<token_par_der,76,25>
<token_pyc,76,26>
<end,77,9>
<if,77,13>
<next,78,5>
<print,79,5>
<token_string,,79,11>
<next,80,1>
<end,81,1>
<sub,81,5>
